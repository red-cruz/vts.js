/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./test/config.js":
/*!************************!*\
  !*** ./test/config.js ***!
  \************************/
/***/ (() => {

eval("// @ts-checks\r\n// import Swal from 'sweetalert2';\r\n// import ValidateThenSubmit from '../src/ValidateThenSubmit';\r\nconst Vts = ValidateThenSubmit;\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  const test = new Vts('myForm');\r\n  console.log(test);\r\n});\r\n\r\n// VTS GLOBAL CONFIGURATION\r\n\r\nVts.setDefaults({\r\n  // AJAX EVENTS\r\n  ajax: {\r\n    beforeSend: (request, abortController, form) => {\r\n      Swal.fire({\r\n        title: 'Loading',\r\n        icon: 'info',\r\n        text: 'Please wait.',\r\n        allowOutsideClick: false,\r\n        showCancelButton: true,\r\n        cancelButtonText: 'Cancel',\r\n      }).then((result) => {\r\n        if (result.isDismissed) {\r\n          abortController.abort();\r\n        }\r\n      });\r\n      return request;\r\n    },\r\n    success: function (data, response, form) {\r\n      Swal.fire({\r\n        title: data.title ?? 'Server connection: ' + response.statusText,\r\n        html: data.text,\r\n        icon: data.icon ?? 'info',\r\n      });\r\n      form.classList.remove('was-validated');\r\n      form.reset();\r\n    },\r\n    complete: (form) => {},\r\n    error: function (errorData, errorResponse, form) {\r\n      const data = errorData ? errorData : {};\r\n      const title =\r\n        'message' in errorResponse ? errorResponse.message : 'Error!';\r\n      const html =\r\n        'stack' in errorResponse\r\n          ? errorResponse.stack\r\n          : 'Unknown error occurred';\r\n\r\n      if ('name' in errorResponse && errorResponse.name === 'AbortError') {\r\n        Swal.close();\r\n        return;\r\n      }\r\n\r\n      console.table(errorResponse);\r\n\r\n      Swal.fire({\r\n        title: data.title || title,\r\n        html: data.text ?? html,\r\n        icon: data.icon || 'error',\r\n        showCancelButton: true,\r\n        cancelButtonText: 'View Error',\r\n      }).then((result) => {\r\n        if (result.dismiss === Swal.DismissReason.cancel) {\r\n          var newWindow = window.open();\r\n          if (newWindow) newWindow.document.body.innerHTML = data.text || html;\r\n        }\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\n// set rules\r\nVts.setDefaults({\r\n  // message: {\r\n  //   // valueMissing: 'This field is required',\r\n  // },\r\n  rules: {\r\n    password_confirmation: {\r\n      match: 'password',\r\n      message: {\r\n        invalid: '${label} must match ${targetLabel}',\r\n      },\r\n    },\r\n    // last_name: {\r\n    //   match: 'first_name',\r\n    //   message: {\r\n    //     valid: 'oks na',\r\n    //     invalid: '${targetValue} != ${value}',\r\n    //     valueMissing: 'required po lname',\r\n    //   },\r\n    // },\r\n  },\r\n});\r\n\n\n//# sourceURL=webpack:///./test/config.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./test/config.js"]();
/******/ 	
/******/ })()
;